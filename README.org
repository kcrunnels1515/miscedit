#+title: README
#+author: Kelly Runnels
#+option: num:nil

* Imports
We need to import ~std::io~ for ~stdout~-related things, and ~std::time::Duration~ for polling terminal window events.
We use raw_mode to actually detect when input is passed into the terminal, as otherwise the terminal does stuff with it.
#+begin_src rust :tangle ./src/main.rs
use std::{time::Duration, io};
use crossterm::terminal::{enable_raw_mode,disable_raw_mode,ClearType::All};
use crossterm::{
    //execute,
    //style::{Color, Print, ResetColor, SetBackgroundColor, SetForegroundColor},
    //ExecutableCommand, Result,
    //terminal::{Clear},
    event::{poll, read, Event, KeyEvent, KeyCode, KeyModifiers},
};
#+end_src

* Example function - PrintEvents
~poll()~ waits for an ~Event~ for a given time period.
If it receives an ~Event~ during the time period, it returns true and allows the ~read()~ function to read the event data.
Otherwise, it returns false, and the loop repeats.
~read()~ will not block the process with this, because an event is guaranteed to exist if the code block containing ~read()~ is reached.
#+begin_src rust :tangle no
fn print_events() -> io::Result<()> {
    loop {
        if poll(Duration::from_millis(500))? {
            match read()? {
                Event::FocusGained => println!("FocusGained"),
                Event::FocusLost => println!("FocusLost"),
                Event::Key(event) => println!("{:?}", event),
                Event::Mouse(event) => println!("{:?}", event),
                Event::Paste(data) => println!("Pasted {:?}", data),
                Event::Resize(width, height) => println!("New size {}x{}", width, height),
            }
        }
    }
    Ok(())
}
#+end_src

* Text Buffer
We want to take the character from a ~Key~ event and insert it into the text editing buffer.
We have a index of the first element of the gap which can be written, and the first element after the gap.
The code and modifiers are passed in to be matched.

Backspace decrements the index of the last element before the gap.
CTRL+c returns an error to end the program.
A random char sets the element at ~b_gap~ to the character entered, and increments ~b_gap~.
String after gap is reversed.
#+begin_src rust :tangle ./src/main.rs
fn poll_insert(text: &mut Vec<char>, b_gap: &mut usize, e_gap: &mut usize, code: KeyCode, modifiers: KeyModifiers) -> io::Result<bool> {
    let mut text_changed: bool = false;
    match code {
        KeyCode::Char(chr) => {
            if chr == 'c' && modifiers == KeyModifiers::CONTROL {
                return Err(io::Error::other("oh no"));
            } else {
                text[*b_gap] = chr;
                ,*b_gap += 1;
                text_changed = true;
            }
        },
        KeyCode::Backspace => {
            if *b_gap > 0 {
                //text[*b_gap - 1] = '\0';
                ,*b_gap -= 1;
                text_changed = true;
            }
        },
        KeyCode::Left => {
            if *b_gap > 0 {
                text[*e_gap] = text[*b_gap-1];
                text[*b_gap-1] = '\0';
                ,*e_gap -= 1;
                ,*b_gap -= 1;
            }
        },
        KeyCode::Right => {
            if *e_gap < text.len() - 1  {
                text[*b_gap] = text[*e_gap+1];
                text[*e_gap] = '\0';
                ,*e_gap += 1;
                ,*b_gap += 1;
            }
        },
        _ => {},
    }
    Ok(text_changed)
}

#+end_src

* Create display string
We create a string by slicing out the gap, and sticking the strings together.
#+begin_src rust :tangle ./src/main.rs
fn buf_to_string(gap_buf: &Vec<char>, b_gap: usize, e_gap: usize) -> String {
    String::from_iter(&gap_buf[0..b_gap]) + &String::from_iter(&gap_buf[e_gap..(gap_buf.len() - 1)])
}
#+end_src

* Main
#+begin_src rust :tangle ./src/main.rs
fn main() -> std::io::Result<()> {
    let mut text: Vec<char> = vec!['\0'; 50];
    enable_raw_mode()?;
    let mut e_gap: usize = 49;
    let mut b_gap: usize = 0;
    let mut dis_str: String = String::new();
    loop {
        if poll(Duration::from_millis(500))? {
            if let Event::Key(KeyEvent { code, modifiers, ..}) = read()? {
                let result: io::Result<bool> = poll_insert(&mut text, &mut b_gap, &mut e_gap, code, modifiers);
                if result.is_err() {
                    break;
                }
                if let Ok(change) = result {
                    if change {
                        dis_str = buf_to_string(&text,b_gap,e_gap);
                    }
                }
            }

        }
    }
    println!("{:?}", text);
    disable_raw_mode()?;
    Ok(())
}
#+end_src
